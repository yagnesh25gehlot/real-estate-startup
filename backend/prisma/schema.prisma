// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role enum - using String instead of enum for SQLite compatibility

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String?
  password    String?  // Hashed password for regular users
  mobile      String?  // Mobile number
  aadhaar     String?  // Aadhaar card number
  aadhaarImage String? // Aadhaar card image URL
  profilePic  String?  // Profile picture URL
  role        String   @default("USER") // USER, DEALER, ADMIN
  status      String   @default("ACTIVE") // ACTIVE, BLOCKED
  createdAt   DateTime @default(now())
  dealer      Dealer?
  bookings    Booking[]
  properties  Property[]
}

model Dealer {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  parent      Dealer?  @relation("DealerHierarchy", fields: [parentId], references: [id])
  parentId    String?
  children    Dealer[] @relation("DealerHierarchy")
  commission  Float    @default(0.0)
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt   DateTime @default(now())
  referralCode String   @unique
  properties  Property[]
  commissions Commission[]
}

model Property {
  id          String   @id @default(uuid())
  title       String
  description String
  type        String   // HOUSE, PLOT, etc.
  location    String?  // City/Location (optional)
  address     String   // Detailed address (required)
  latitude    Float?   // GPS coordinates
  longitude   Float?   // GPS coordinates
  price       Float
  status      String   @default("FREE") // FREE, BOOKED, SOLD
  mediaUrls   String   // S3 paths as JSON string
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  dealer      Dealer?  @relation(fields: [dealerId], references: [id])
  dealerId    String?
  bookings    Booking[]
  commissions Commission[]
  createdAt   DateTime @default(now())
}

model Booking {
  id          String   @id @default(uuid())
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  startDate   DateTime
  endDate     DateTime
  dealerCode  String?  // Optional dealer referral code
  bookingCharges Float @default(300.0) // Fixed booking charges
  totalAmount Float    // Total amount including booking charges
  payment     Payment?
  status      String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED, EXPIRED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Manual payment (UPI) fields for MVP
  paymentMethod String?
  paymentRef    String?
  paymentProof  String? // file URL under /uploads/payments/
}

model Payment {
  id          String   @id @default(uuid())
  amount      Float
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String   @unique
  stripeId    String   @unique
  createdAt   DateTime @default(now())
}

model Commission {
  id          String   @id @default(uuid())
  dealer      Dealer   @relation(fields: [dealerId], references: [id])
  dealerId    String
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  amount      Float
  level       Int      // 1, 2, 3 for different commission levels
  status      String   @default("PENDING") // PENDING, PAID
  createdAt   DateTime @default(now())
}

model CommissionConfig {
  id          String   @id @default(uuid())
  level       Int      @unique
  percentage  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // INFO, SUCCESS, WARNING, ERROR
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
} 